# EditorConfig is awesome:http://EditorConfig.org
 
# top-most EditorConfig file
root = true
 
# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)
 
# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = crlf
charset = utf-8-bom
 
# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2
 
# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2
 
# JSON files
[*.json]
indent_size = 2
 
# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion
 
# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion
 
# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
 
# Naming Conventions Stuffs
 
# Methods, Properties and Enums at Any Accessibility Must be Pascal Case
dotnet_naming_symbols.method_and_property_symbols.applicable_kinds= method,property,enum
dotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = warning
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = method_and_property_symbols
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case_style
 
# Attempts to ensure all public members are Pascal Case
dotnet_naming_symbols.public_members_casing_symbols.applicable_kinds = property,method,field,event,delegate
dotnet_naming_symbols.public_members_casing_symbols.applicable_accessibilities = public,protected
 
dotnet_naming_style.public_members_casing_style.capitalization = pascal_case
 
dotnet_naming_rule.public_members_casing.symbols = public_members_casing_symbols
dotnet_naming_rule.public_members_casing.style = public_members_casing_style
dotnet_naming_rule.public_members_casing.severity = warning
 
# Attempts to ensure all public members are Pascal Case
# Should this set apply to events and delegates?
dotnet_naming_symbols.private_members_casing_symbols.applicable_kinds = property,field
dotnet_naming_symbols.private_members_casing_symbols.applicable_accessibilities = internal,protected_internal,private
 
dotnet_naming_style.private_members_casing_style.capitalization = camel_case
 
dotnet_naming_rule.private_members_casing.symbols = private_members_casing_symbols
dotnet_naming_rule.private_members_casing.style = private_members_casing_style
dotnet_naming_rule.private_members_casing.severity = warning
 
 
# Attempts to ensure Async suffix
dotnet_naming_symbols.ensure_async_suffix_symbols.required_modifiers = async
dotnet_naming_symbols.ensure_async_suffix_symbols.applicable_kinds = method
dotnet_naming_symbols.ensure_async_suffix_symbols.applicable_accessibilities = *
 
dotnet_naming_style.ensure_async_suffix_style.required_suffix = Async
dotnet_naming_style.ensure_async_suffix_style.capitalization = pascal_case
 
dotnet_naming_rule.ensure_async_suffix.symbols = ensure_async_suffix_symbolsdotnet_naming_style.ensure_async_suffix_style.capitalization = pascal_case
 
dotnet_naming_rule.ensure_async_suffix.symbols = ensure_async_suffix_symbols
dotnet_naming_rule.ensure_async_suffix.style = ensure_async_suffix_style
dotnet_naming_rule.ensure_async_suffix.severity = warning
 
 
# CSharp code style settings:
[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
 
# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
 
# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none
 
# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
 
# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
 
# Spacing settings:
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_name_and_open_parenthesis = false
 
# Wrapping settings:
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true